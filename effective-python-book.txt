【環境】

python：		2.7.11+
python3:	3.5.1+
OS:			ubuntu16.04
ecclpse：	Mars.2 Release (4.5.2)
PyDev：		5.0.0
java:		openjdk version "1.8.0_91"

【履歴】

1章　Python流思考

2016.06.05	項目1：使っているPythonのバージョンを知っておく
			項目2：PEP８スタイルガイドに従う
			項目３：bytes, str, unicode の違いについて
			項目4：複雑な式の代わりにヘルパー関数を書く
2016.06.07	項目5：シーケンスをどのようにスライスするか知っておく
			項目6：1つのスライスでは、start,end,strideを使わない
			項目7：mapやfilterの代わりにリスト内包表記を使う
			項目8：リスト内包表記には、3つ以上の式を避ける
			項目9：大きな内包表記にはジェネレータ式を考える
2016.06.08	項目10：rangeよりはenumerateにする
			項目11：イテレータを並列に処理するにはzipを使う
			項目12：forとwhileループの後のelseブロックを使うのを避ける
			項目13：try/except/else/finallyの各ブロックを活用する

2章　関数

2016.06.09	項目14：Noneを返すよりは例外を選ぶ
			項目15：クロージャが変数スコープとどう関わるかを知っておく
			項目16：リストを返さずにジェネレータを返すことを考える
2016.06.10	項目17：引数に対してイテレータを使うときには確実さを尊ぶ
			項目18：可変長位置引数を使って、見た目をすっきりさせる
2016.06.11	項目19：キーワード引数にオプションの振る舞いを与える

			項目20：動的なデフォルト引数を指定するときにはNoneとドキュメンテーション文字列を使う
2016.06.12	項目21：キーワード専用引数で明確さを高める

3章　クラスと継承

2016.06.13	項目22：辞書やタプルで記録管理するよりもヘルパークラスを使う
			項目23：単純なインタフェースにはクラスの代わりに関数を使う
			項目24：@classmethodポリモルフィズムを使ってオブジェクトをジェネリックに構築する
2016.06.14	項目25：親クラスをsuperを使って初期化する
			項目26：多重継承はmix-inユーティリティクラスだけに使う
			項目27：プライベート属性よりはパブリック属性が好ましい
2016.06.16	項目28：カスタムコンテナ型はcollctions.absを継承する

4章　メタクラスと属性

2016.06.16	項目29：getやsetメソッドより素のままの属性を使う
2016.06.25	項目30：属性をリファクタリングする代わりに@propertyを考える
			項目31：再利用可能な@propertyメソッドにディスクリプタを使う
2016.06.26	項目32：遅延属性には__getattr__、__getattribute__、__setattr__を使う
2016.06.27	項目33：サブクラスをメタクラスで検証する
			項目34：クラスの存在をメタクラスで登録する
			項目35：クラス属性をメタクラスで注釈する

5章　並行性と並列性

2016.06.28	項目36：subprocessを使って子プロセスを管理する
			項目37：スレッドはブロッキングI/Oに使い、並列性に使うのは避ける
			項目38：スレッドでのデータ競合を防ぐためにLockを使う
2016.06.29、2016.06.30
			項目39：スレッド間の協調作業にはQueueを使う
2016.07.01	項目40：多くの関数を並行に実行するにはコルーチンを考える
			項目41：本当の並列性のためにconcurrent.futuresを考える


＠＠＠＠＠＠＠＠　コメント　＠＠＠＠＠＠＠＠


